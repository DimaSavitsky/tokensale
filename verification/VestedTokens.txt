pragma solidity ^0.4.11;

// File: zeppelin-solidity/contracts/math/SafeMath.sol

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

// File: zeppelin-solidity/contracts/token/ERC20Basic.sol

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

// File: zeppelin-solidity/contracts/token/BasicToken.sol

/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }

}

// File: zeppelin-solidity/contracts/token/ERC20.sol

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: zeppelin-solidity/contracts/token/StandardToken.sol

/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));

    uint256 _allowance = allowed[_from][msg.sender];

    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
    // require (_value <= _allowance);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue)
    returns (bool success) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseApproval (address _spender, uint _subtractedValue)
    returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

// File: contracts/protocol/TokenStake.sol

/**
 * @title Generic Token Staking Contract
 * @dev The Decentralized Insurance Platform Token.
 * @author Christoph Mussenbrock
 * @copyright 2017 Etherisc GmbH
 */

pragma solidity ^0.4.15;



/**
 * TokenStake Contract.
 * This contract has to be extended to be useful, as
 * the release functions are internal.
 * We expect the owner of this contract to check if the used token
 * is not an "attacking" token.
 */
contract TokenStake {

  using SafeMath for uint256;

  StandardToken token;
  mapping (address => uint256) public staked;

  event Staked(address _staker, uint256 _value);
  event Released(address _beneficiary, uint256 _value);

  function TokenStake (StandardToken _token) public {
    token = _token;
  }

  // requires approval of token transfer before calling this function
  function stakeFor(address _staker, uint256 _value) public returns (bool) {
    if (token.transferFrom(msg.sender, address(this), _value)) {
      staked[_staker] = staked[_staker].add(_value);
      Staked(_staker, _value);
      return true;
    } else {
      return false;
    }
  }

  function stake(uint256 _value) public returns (bool) {
    return stakeFor(msg.sender, _value);
  }

  function releaseFor(address _beneficiary, uint256 _value) internal returns (bool) {
    staked[msg.sender].sub(_value); // will throw if _value > staked[_staker]
    if (token.transfer(_beneficiary, _value)) {
      Released(_beneficiary, _value);
      return true;
    } else {
      staked[msg.sender].add(_value);
      return false;
    }
  }

  function release(uint256 _value) internal returns (bool) {
    return releaseFor(msg.sender, _value);
  }

}

// File: zeppelin-solidity/contracts/ownership/Ownable.sol

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}

// File: contracts/tokensale/TokenTimelock.sol

/**
 * @title Generic Token Time Lock
 * @dev The Decentralized Insurance Platform Token.
 * @author Christoph Mussenbrock
 * @copyright 2017 Etherisc GmbH
 */

pragma solidity ^0.4.15;






contract TokenTimelock is TokenStake, Ownable {
  
  using SafeMath for uint256;

  mapping (address => mapping(uint256 => uint256)) public releaseTime;

  event TimeLocked(address _staker, uint256 _releaseTime, uint256 _value);
  event TimeUnlocked(address _beneficiary, uint256 _releaseTime, uint256 _value);


  function TokenTimelock(StandardToken _token) public TokenStake(_token) {
    // nothing to do; Constructor is only used to pass constructor argument
  }

  /**
   * Timelock tokens for a given staker.
   * This function can (successfully) only be called by an address which has allowance for _value of tokens.
   * @param _staker      address who will receive tokens after locking period
   * @param _releaseTime timestamp after which the tokens are unlocked
   * @param _value       amount of tokens
   */
  function setTimelockFor(address _staker, uint256 _releaseTime, uint256 _value) public {
    require(stakeFor(_staker, _value));
    releaseTime[_staker][_releaseTime] = releaseTime[_staker][_releaseTime].add(_value);
    TimeLocked(_staker, _releaseTime, _value);
  }

  /**
   * Timelock tokens for oneself.
   * @param _releaseTime timestamp after which tokens are unlocked
   * @param _value       amount of tokens
   */
  function setTimelock(uint256 _releaseTime, uint256 _value) public {
    setTimelockFor(msg.sender, _releaseTime, _value);
  }

  /**
   * Release locked tokens and transfer them to a given beneficiary.
   * @param  _beneficiary receiver of released tokens.
   * @param  _releaseTime timestamp
   * @param  _value amount of tokens to be released
   * @return true on success.
   */
  function releaseTimelockFor(address _beneficiary, uint256 _releaseTime, uint256 _value) public returns (bool) {
    require(now >= _releaseTime);
    releaseTime[msg.sender][_releaseTime] = releaseTime[msg.sender][_releaseTime].sub(_value); // will throw if result < 0
    if (releaseFor(_beneficiary, _value)) {
      TimeUnlocked(_beneficiary, _releaseTime, _value);
      return true;
    } else {
      releaseTime[msg.sender][_releaseTime] = releaseTime[msg.sender][_releaseTime].add(_value);
      return false;
    }
  }

  /**
   * Release locked tokens for oneself.
   * @param _releaseTime timestamp
   * @param _value amount of tokens to be released
   * @return true on success.
   */
  function releaseTimelock(uint256 _releaseTime, uint256 _value) public returns (bool) {
    return releaseTimelockFor(msg.sender, _releaseTime, _value);
  } 

}

// File: contracts/tokensale/VestedTokens.sol

/**
 * @title Generic Token Time Lock
 * @dev The Decentralized Insurance Platform Token.
 * @author Christoph Mussenbrock
 * @copyright 2017 Etherisc GmbH
 */

pragma solidity ^0.4.15;




contract VestedTokens is TokenTimelock {
  using SafeMath for uint256;

  // uint256 UpperBound = 25; // could be implemented to limit the numberOfPeriods

  event GrantGiven(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliff, uint256 _vestingPeriod);

  function VestedTokens(StandardToken _token) public TokenTimelock(_token) {
    // nothing to do; Constructor is only used to pass constructor argument
  }

  // precondition: granter has approved this contract to the amount to be granted
  function grant(
    address _beneficiary, 
    uint256 _amount, 
    uint256 _startTime, 
    uint256 _cliff, 
    uint256 _vestingPeriod
    ) public 
    {

    uint256 numberOfPeriods = _vestingPeriod.div(_cliff);
    uint256 part = _amount.div(numberOfPeriods);
    require(_amount == (part.mul(numberOfPeriods)));

    for (uint256 period = 1; period <= numberOfPeriods; period++) {
      setTimelockFor(_beneficiary, _startTime.add(period.mul(_cliff)), part);
    }

    GrantGiven(_beneficiary, _amount, _startTime, _cliff, _vestingPeriod);

  }

}
pragma solidity ^0.4.11;

// File: zeppelin-solidity/contracts/math/SafeMath.sol

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

// File: zeppelin-solidity/contracts/token/ERC20Basic.sol

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

// File: zeppelin-solidity/contracts/token/BasicToken.sol

/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }

}

// File: zeppelin-solidity/contracts/token/ERC20.sol

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: zeppelin-solidity/contracts/token/StandardToken.sol

/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));

    uint256 _allowance = allowed[_from][msg.sender];

    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
    // require (_value <= _allowance);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue)
    returns (bool success) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseApproval (address _spender, uint _subtractedValue)
    returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

// File: contracts/protocol/TokenStake.sol

/**
 * @title Generic Token Staking Contract
 * @dev The Decentralized Insurance Platform Token.
 * @author Christoph Mussenbrock
 * @copyright 2017 Etherisc GmbH
 */

pragma solidity ^0.4.15;



/**
 * TokenStake Contract.
 * This contract has to be extended to be useful, as
 * the release functions are internal.
 * We expect the owner of this contract to check if the used token
 * is not an "attacking" token.
 */
contract TokenStake {

  using SafeMath for uint256;

  StandardToken token;
  mapping (address => uint256) public staked;

  event Staked(address _staker, uint256 _value);
  event Released(address _beneficiary, uint256 _value);

  function TokenStake (StandardToken _token) public {
    token = _token;
  }

  // requires approval of token transfer before calling this function
  function stakeFor(address _staker, uint256 _value) public returns (bool) {
    if (token.transferFrom(msg.sender, address(this), _value)) {
      staked[_staker] = staked[_staker].add(_value);
      Staked(_staker, _value);
      return true;
    } else {
      return false;
    }
  }

  function stake(uint256 _value) public returns (bool) {
    return stakeFor(msg.sender, _value);
  }

  function releaseFor(address _beneficiary, uint256 _value) internal returns (bool) {
    staked[msg.sender].sub(_value); // will throw if _value > staked[_staker]
    if (token.transfer(_beneficiary, _value)) {
      Released(_beneficiary, _value);
      return true;
    } else {
      staked[msg.sender].add(_value);
      return false;
    }
  }

  function release(uint256 _value) internal returns (bool) {
    return releaseFor(msg.sender, _value);
  }

}

// File: zeppelin-solidity/contracts/ownership/Ownable.sol

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}

// File: contracts/tokensale/TokenTimelock.sol

/**
 * @title Generic Token Time Lock
 * @dev The Decentralized Insurance Platform Token.
 * @author Christoph Mussenbrock
 * @copyright 2017 Etherisc GmbH
 */

pragma solidity ^0.4.15;






contract TokenTimelock is TokenStake, Ownable {
  
  using SafeMath for uint256;

  mapping (address => mapping(uint256 => uint256)) public releaseTime;

  event TimeLocked(address _staker, uint256 _releaseTime, uint256 _value);
  event TimeUnlocked(address _beneficiary, uint256 _releaseTime, uint256 _value);


  function TokenTimelock(StandardToken _token) public TokenStake(_token) {
    // nothing to do; Constructor is only used to pass constructor argument
  }

  /**
   * Timelock tokens for a given staker.
   * This function can (successfully) only be called by an address which has allowance for _value of tokens.
   * @param _staker      address who will receive tokens after locking period
   * @param _releaseTime timestamp after which the tokens are unlocked
   * @param _value       amount of tokens
   */
  function setTimelockFor(address _staker, uint256 _releaseTime, uint256 _value) public {
    require(stakeFor(_staker, _value));
    releaseTime[_staker][_releaseTime] = releaseTime[_staker][_releaseTime].add(_value);
    TimeLocked(_staker, _releaseTime, _value);
  }

  /**
   * Timelock tokens for oneself.
   * @param _releaseTime timestamp after which tokens are unlocked
   * @param _value       amount of tokens
   */
  function setTimelock(uint256 _releaseTime, uint256 _value) public {
    setTimelockFor(msg.sender, _releaseTime, _value);
  }

  /**
   * Release locked tokens and transfer them to a given beneficiary.
   * @param  _beneficiary receiver of released tokens.
   * @param  _releaseTime timestamp
   * @param  _value amount of tokens to be released
   * @return true on success.
   */
  function releaseTimelockFor(address _beneficiary, uint256 _releaseTime, uint256 _value) public returns (bool) {
    require(now >= _releaseTime);
    releaseTime[msg.sender][_releaseTime] = releaseTime[msg.sender][_releaseTime].sub(_value); // will throw if result < 0
    if (releaseFor(_beneficiary, _value)) {
      TimeUnlocked(_beneficiary, _releaseTime, _value);
      return true;
    } else {
      releaseTime[msg.sender][_releaseTime] = releaseTime[msg.sender][_releaseTime].add(_value);
      return false;
    }
  }

  /**
   * Release locked tokens for oneself.
   * @param _releaseTime timestamp
   * @param _value amount of tokens to be released
   * @return true on success.
   */
  function releaseTimelock(uint256 _releaseTime, uint256 _value) public returns (bool) {
    return releaseTimelockFor(msg.sender, _releaseTime, _value);
  } 

}

// File: contracts/tokensale/VestedTokens.sol

/**
 * @title Generic Token Time Lock
 * @dev The Decentralized Insurance Platform Token.
 * @author Christoph Mussenbrock
 * @copyright 2017 Etherisc GmbH
 */

pragma solidity ^0.4.15;




contract VestedTokens is TokenTimelock {
  using SafeMath for uint256;

  // uint256 UpperBound = 25; // could be implemented to limit the numberOfPeriods

  event GrantGiven(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliff, uint256 _vestingPeriod);

  function VestedTokens(StandardToken _token) public TokenTimelock(_token) {
    // nothing to do; Constructor is only used to pass constructor argument
  }

  // precondition: granter has approved this contract to the amount to be granted
  function grant(
    address _beneficiary, 
    uint256 _amount, 
    uint256 _startTime, 
    uint256 _cliff, 
    uint256 _vestingPeriod
    ) public 
    {

    uint256 numberOfPeriods = _vestingPeriod.div(_cliff);
    uint256 part = _amount.div(numberOfPeriods);
    require(_amount == (part.mul(numberOfPeriods)));

    for (uint256 period = 1; period <= numberOfPeriods; period++) {
      setTimelockFor(_beneficiary, _startTime.add(period.mul(_cliff)), part);
    }

    GrantGiven(_beneficiary, _amount, _startTime, _cliff, _vestingPeriod);

  }

}
